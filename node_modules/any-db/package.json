{
  "name": "any-db",
  "version": "0.3.6",
  "description": "Database-agnostic connection pooling, querying, and result sets",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db.git"
  },
  "author": {
    "name": "Stephen Sugden"
  },
  "keywords": [
    "mysql",
    "postgres",
    "pg",
    "sqlite",
    "sqlite3"
  ],
  "license": "BSD",
  "dependencies": {
    "any-db-pool": "*"
  },
  "devDependencies": {
    "sqlite3": "*",
    "pg": "*",
    "mysql": "*",
    "tap": "*"
  },
  "readme": "# any-db - a less-opinionated database abstraction layer.\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db)\n\n## Synopsis\n\n(There's a more detailed [API](#api) section below)\n\n    var anyDB = require('any-db')\n    var dbURL = 'driver://user:pass@hostname/database'\n    \nEstablish a connection\n\n    var conn = anyDB.createConnection(dbURL)  // Takes an optional callback\n    \nMake queries\n\n    var sql = 'SELECT * FROM my_table'\n    conn.query(sql).on('row', function (row) {})  // evented\n    conn.query(sql, function (error, result) {})  // or callback\n    \nUse bound parameters\n\n    sql += ' WHERE my_column = ?'\n    conn.query(sql, [42]).on('row', ...)           // again, evented\n    conn.query(sql, [42], function (err, res) {})  // or callback\n\nClose a connection\n\n    conn.end()\n    \nStart a transaction\n\n    var tx = conn.begin()             // Can also take a callback\n    tx.on('error', function (err) {}) // Emitted for unhandled query errors\n    tx.query(...)                     // same interface as connections, plus...\n    tx.commit()                       // takes an optional callback for errors\n    tx.rollback()                     // this too\n    \nCreate a connection pool that maintains 2-20 connections\n\n    var pool = anyDB.createPool(dbURL, {min: 2, max: 20})\n    \n    pool.query(...)       // perform a single query, same API as connection\n    var tx = pool.begin() // start a transaction, again, same API as connection\n    pool.close()          // close the pool (call when your app should exit)\n\n## Description\n\nThe purpose of this library is to provide a consistent API for the commonly used\nfunctionality of SQL database drivers, while avoiding altering driver behaviour\nas much as possible.\n\nThe long-term goal of this project is to serve as the testing ground for finding\na suitable common interface, then (hopefully) convincing driver implementors to\nsupport it natively. In short, any-db hopes to prove it's usefulness well enough\nthat most of it can be obviated by the drivers themselves.\n\n### Things it does\n\n * Supports MySQL, Postgres, and SQLite3 as equally as possible. (More driver\n\t support is very much welcomed!)\n * Parses connection parameters from URLs: `driver://user:pass@host/database`\n * Streams results or gets them all at once, using an interface almost identical\n\t to the existing interfaces of the MySQL and Postgres drivers.\n * Simple connection pooling including the ability to execute queries against\n\t the pool directly for auto-release behaviour. E.g. this will never leak\n\t connections: `pool.query(\"SELECT 1\", function (err, results) { ... })`\n * Exposes a uniform transaction API.\n\n### Things it will do soon\n\n * Have more and more tests.\n\n### Things it might do (feedback needed!)\n\n * [Wrap errors](https://github.com/grncdr/node-any-db/issues/13).\n * Provide a common result set API.\n\n### Things it will never do\n\n * Add it's own query helper methods like `.first` or `.fetchAll`\n * Include any sort SQL string building. You might want to try my other library\n\t [gesundheit](https://github.com/BetSmartMedia/gesundheit), or one of the many\n\t [alternatives](https://encrypted.google.com/search?q=sql&q=site:npmjs.org&hl=en)\n\t for that. _(send me pull requests to list your libs here)_\n\n## Install\n\n    npm install --save any-db\n    npm install --save {pg,mysql,sqlite3}\n\n\n## Contributing\n\nFor ideas that would change an existing API or behaviour please open an issue to\npropose the change before spending time on implementing it. I know it's hard (I\ncode-first-ask-questions-later *way* too frequently :smile:) but I'd really hate\nfor anybody to put their time into something that won't be merged.\n\nI'm not terribly picky about code-formatting, but please try and keep lines\nunder 80 characters long if you can help it.\n\n## API\n\n### exports.createConnection\n\n`require('any-db').createConnection(dbURL, [callback])`\n\nCreate a connection object from a `dbURL` of the form\n_driver://user:pass@hostname/databasename_ where _driver_ is one of \"mysql\",\n\"postgres\", or \"sqlite3\". If a callback is given, it will be called with either\nan error or the established connection: `callback(error, conn)`. Additional\nconnection settings can be included as query parameters in the URL. The returned\nwill conform to the [Connection API](#connection) detailed below.\n\nSee also: Driver-specific notes for [Postgres](#postgres).\n\n### exports.createPool\n\n`require('any-db').createPool(dbUrl, [poolOpts])`\n\nCreate a new [ConnectionPool](#connectionpool) and return it immediately. See\nthe [createConnection](#exportscreateconnection) docs for an explanation of the\n`dbURL` parameter. `poolOpts` may be an object with any of the following keys:\n\n * `min: 2`\n   \n\t The minimum number of connections to keep open in the pool.\n\n * `max: 10`\n \n   The maximum number of connections to allow in the pool.\n\n * `onConnect: function (conn, done) { done(null, conn) }`\n\n   Called immediately after a connection is first established. Use this to do\n\t one-time setup of new connections. You must call `done(error, connection)`\n\t for the connection to actually make it into the pool.\n\n * `reset: function (conn, done) { done(null) }`,\n\n   Called each time the connection is returned to the pool. Use this to restore\n\t your connection to it's original state (e.g. rollback transactions, set the\n\t user or encoding).\n\nSee [ConnectionPool](#connectionpool) below for the API of the returned object.\n\n### Connection\n\nConnection objects returned by [createConnection](#exportscreateconnection) or\n[ConnectionPool.acquire](#connectionpoolacquire) are guaranteed to have the\nmethods and events listed here, but the connection objects of various drivers\nmay have additional methods or emit additional events. If you need to access a\nfeature of your database is not described here (such as Postgres' server-side\nprepared statements), consult the documentation for the database driver.\n\n#### Connection Events\n\n * `'error', err` - Emitted when there is a connection-level error.\n * `'close'` - Emitted when the connection has been closed.\n\n#### Connection.query\n\nExecute a SQL statement, using bound parameters if they are given, and return a\n[Query](#query) object for the in-progress query. If `callback` is given it will\nbe called with any errors or an object representing the query results\n(`callback(error, results)`). The returned Query object and the result object\npassed to the callback may have extra driver-specific properties and events.\n\n*Callback-style*\n```javascript\nconn.query('SELECT * FROM my_table', function (err, res) {\n  if (err) return console.error(err)\n  res.rows.forEach(console.log)\n  console.log('All done!')\n})\n```\n\n*EventEmitter-style*\n```javascript\nconn.query('SELECT * FROM my_table')\n  .on('error', console.error)\n  .on('row', console.log)\n  .on('end', function () { console.log('All done!') })\n```\n\n#### Connection.begin\n\n`var tx = conn.begin([callback])`\n\nStart a new transaction and return a [Transaction](#transaction) object to\nmanage it. If `callback` is given it will be called with any errors encountered\nstarting the transaction and the transaction object itself: `callback(error,\ntransaction)`. See also: the [Transaction](#transaction) API.\n\n*Callback-style*\n```javascript\nconn.begin(function (err, transaction) {\n\tif (err) return console.error(err)\n\t// Do work using transaction\n})\n```\n\n```javascript\nvar transaction = conn.begin()\ntransaction.on('error', console.error)\n// Do work using transaction, queries are queued until transaction successfully\n// starts.\n```\n\n#### Connection.end\n\n`conn.end([callback])`\n\nClose the database connection. If `callback` is given it will be called after\nthe connection has closed.\n\n\n### Query\n\nQuery objects are returned by the `.query(...)` methods of\n[connections](#connection), [pools](#connectionpool), and\n[transctions](#transaction). Like connections, query objects are created by the\ndrivers themselves and may have more methods and events than are described here.\n\n#### Query Events\n\n * `'error', err` - Emitted if the query results in an error.\n * `'row', row` - Emitted for each row in the queries result set.\n * `'end', [res]` - Emitted when the query completes.\n\n### ConnectionPool\n\nConnectionPool instances are created with [createPool](#exportscreatepool).\n\n[any-db-pool](http://npm.im/any-db-pool)\n\n#### ConnectionPool.query\n\n`var query = pool.query(stmt, [params], [callback])`\n\nActs exactly like [Connection.query](#connectionquery) by automatically\nacquiring a connection and releasing it when the query completes.\n\n#### ConnectionPool.begin\n\n`var tx = pool.begin([callback])`\n\nActs exactly like [Connection.begin](#connectionbegin), but the underlying\nconnection is returned to the pool when the transaction commits or rolls back.\n\n#### ConnectionPool.acquire\n\n`pool.acquire(function (err, conn) { ... })`\n\nRemove a connection from the pool. If you use this method you **must** return\nthe connection back to the pool using [ConnectionPool.release](#connectionpoolrelease).\n\n#### ConnectionPool.release\n\n`pool.release(conn)`\n\nReturn a connection to the pool. This should only be called with connections\nyou've manually [acquired](#connectionpoolacquire), and you **must not**\ncontinue to use the connection after releasing it.\n\n#### ConnectionPool.close\n\nStop giving out new connections, and close all existing database connections as\nthey are returned to the pool.\n\n#### ConnectionPool events\n\n * `'close'` - emitted when the connection pool has closed all of it\n\t connections after a call to `close()`.\n\n### Transaction\n\nTransaction objects wrap a [Connection](#connection) so that all queries take\nplace within a single database transaction. Queries that error will cause the\ndatabase transaction to automatically rollback. If a query has no callback, the\ntransaction will handle (and re-emit) `'error'` events for that query. This enables\nhandling errors for the entire transaction in a single place.\n\n#### Transaction.query\n\n`var q = tx.query(stmt, [params], [callback])`\n\nActs exactly like [Connection.query](#connectionquery) except queries are\nguaranteed to be performed within the transaction. If the transaction has been\ncommitted or rolled back further calls to `query` will fail.\n\n#### Transaction.commit\n\n`tx.commit([callback])`\n\nIssue a `COMMIT` statement to the database. If a callback is given it will be\ncalled with any errors after the `COMMIT` statement completes. The transaction\nobject itself will be unusable after calling `commit()`.\n\n#### Transaction.rollback\n\n`tx.rollback([callback])`\n\nThe same as [Transaction.commit](#transactioncommit) but issues a `ROLLBACK`.\nAgain, the transaction will be unusable after calling this method.\n\n#### Transaction events\n\n * `'committed'` - Emitted after the transaction has successfully committed.\n * `'rolled back'` - Emitted after the transaction has rolled back.\n * `'error', err` - Emitted under three conditions:\n   1. There was an error acquiring a connection.\n   2. Any query performed in this transaction emits an error that would otherwise\n      go unhandled.\n   3. Any of `query`, `commit`, or `rollback` are called after the connection has\n      already been committed or rolled back.\n\n   Note that the `'error'` event **may be emitted multiple times!** depending on\n   the callback you are registering, you way want to wrap it using [once][once].\n   \n[once]: http://npm.im/once\n\n#### Transaction Example\n\nHere's an example where we stream all of our user ids, check them against an\nexternal abuse-monitoring service, and flag or delete users as necessary, if\nfor any reason we only get part way through, the entire transaction is rolled\nback and nobody is flagged or deleted:\n\n\tvar tx = pool.begin()\n\n\ttx.on('error', finished)\n\n\t/*\n\tWhy query with the pool and not the transaction?\n\tBecause it allows the transaction queries to begin executing immediately,\n\trather than queueing them all up behind the initial SELECT.\n\t*/\n\tpool.query('SELECT id FROM users').on('row', function (user) {\n\t\tif (tx.state() == 'rolled back') return\n\t\tabuseService.checkUser(user.id, function (err, result) {\n\t\t\tif (err) return tx.handleError(err)\n\t\t\t// Errors from these queries will propagate up to the transaction object\n\t\t\tif (result.flag) {\n\t\t\t\ttx.query('UPDATE users SET abuse_flag = 1 WHERE id = $1', [user.id])\n\t\t\t} else if (result.destroy) {\n\t\t\t\ttx.query('DELETE FROM users WHERE id = $1', [user.id])\n\t\t\t}\n\t\t})\n\t}).on('error', function (err) {\n\t\ttx.handleError(err)\n\t}).on('end', function () {\n\t\ttx.commit(finished)\n\t})\n\n\tfunction finished (err) {\n\t\tif (err) console.error(err)\n\t\telse console.log('All done!')\n\t}\n\n## Driver-specific notes\n\n### Postgres\n\nIf you have issues using the native backend for the pg driver on your platform,\nyou can force anyDB to use the pure-JavaScript like so:\n\n```javascript\nvar anyDB = require('any-db')\nanyDB.adapters.postgres.forceJS = true\n```\n\nYou **must** do the above *before* you create any connections or connection\npools.\n\n### SQLite3\n\nYou can include any of the SQLite3 mode flags as query parameters in your database\nURL. So if you wanted to open your database in read-only mode for example, just\nappend `?OPEN_READONLY` to the URL. The available flags are documented in this\n[SQLite3 wiki page](https://github.com/developmentseed/node-sqlite3/wiki/API).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/grncdr/node-any-db/issues"
  },
  "_id": "any-db@0.3.6",
  "_from": "any-db@0.3.x"
}
